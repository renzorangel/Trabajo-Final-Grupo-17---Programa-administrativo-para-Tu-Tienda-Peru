
"""PROGRAMA SISTEMATICO ADMINISTRATIVO PARA TUTIENDAPERU_EN PYTHON_GRUPO17.ipynb


!pip install numpy
!pip install matplotlib
!pip install pandas

import getpass
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.pylab import subplots

#GRUPO 17 DEL CURSO PYTHON ENERO 2022
#   Mondragón Payac Billy 
#   Panta Panta Jimy Aldair 
#   Alberca Elera Gustavo Alonso 
#   Del Carmen Rangel Renzo Daniel  

#VARIABLES GLOBALES
#Clave y usuario_Area Logistica_Administrativa
__usuario1= "admin"
__clave1 = "admin123"
#Clave y usuario_Area Almacen
__usuario2="1234"
__clave2="1234"

#Variables globales
inventario_df=""
descarga_df=""
stockActualizado_df=""

print("BIENVENIDO AL SISTEMA VIRTUAL ADMINISTRATIVO DE TUTIENDAPERU")
print(10*"-",'SOLO ACCESO PARA PERSONAL AUTORIZADO','-'*10)

#Menu Principal Inicial
def main():
    print ("\nOpciones de Exec de Usuario")
    print ("\t1 - Logearse Administrador")
    print ("\t2 - Logearse Almacen")
    print ("\t3 - Salir")

  
################### MENU ADMINISTRATIVO Y SUS FUNCIONES #################################

def menu_administracion() :
  global stockActualizado_df
  global inventario_df
  print("")
  print(10*'-',"BIENVENIDO A LA LISTA DE OPCIONES DE ADMINISTRADOR",'-'*10)
  eleccion_administracion=input("""
  \t1 - VISUALIZAR STOCK EXISTENTE
  \t2 - INGRESAR NUEVAS COMPRAS(INVENTARIADO)
  \t3 - INFORMACION PAGO MENSUAL A LOS TRABAJADORES
  \t4 - CUADROS GRAFICOS 
  \t5 - SALIR
  \nINSERTE UNA OPCIÓN: """)
  if eleccion_administracion == "1":
          stock_actualizado()
          input("\nPRESIONE 'START' PARA CONTINUAR...")
          menu_administracion()
  elif eleccion_administracion=="2":
          inventariado_articulos()
          inventario_articulos_submenu()
          input("\nPRESIONE 'START' PARA CONTINUAR: ")
  elif eleccion_administracion=="3":
          Informacion_Mensualidad()
          input("\nPRESIONE 'START' PARA CONTINUAR: ")
          menu_administracion()
  elif eleccion_administracion=="4":
          graficos()
  elif eleccion_administracion=="5":
          print("GRACIAS")
  
  else:
        input("NO INGRESASTE UNA OPCION CORRECTA...\nPulsar una tecla para continuar: ")
        menu_administracion()

#VISUALIZACION DE STOCK ( PARA VISUALIZACION DE ADMINISTRADOR Y ALMACEN) , OPCION 1 PARA AMBOS CASOS DE LOS MENU(s) 
def stock_actualizado():
  global stockActualizado_df
  ruta_stock= '/content/Stock_Actualizado_Proyec2022.xlsx'
  stockActualizado_df=pd.read_excel(ruta_stock)
  display(stockActualizado_df)
  filtro_stock()

#FILTRO DE STOCK PARA AMBOS CASOS ADMINITRADOR Y ALMACEN , CORRESPONDIENTE A LA OPCION 1 DE SUS MENU(s)
def filtro_stock():
  global stockActualizado_df
  print("")
  filtro_stock=input("""QUE ACCIÓN DESEA REALIZAR:
  \t1 - FILTRAR
  \t2 - SALIR
  \nSELECCIONE UNA OPCION: """)
  if filtro_stock == "1":
    print("POR EL MOMENTO SOLO SE PUEDE FILTRAR LOS ARTÍCULOS POR 'CATEGORIA'")
    stockActualizado_df.describe()
    respuesta_filtro =stockActualizado_df.loc[stockActualizado_df['TIPO'] == input("""\n-JOVEN\n-ADULTO\n-NIÑO
    \nINGRESE PALABRA A FILTRAR: """)]
    display(respuesta_filtro)
  elif filtro_stock == "2":
    menu_administracion()

#RUTA EXCEL DEL INGRESO DE ARTICULOS COMPRADOS POR LA EMPRESA "TUTIENDAPERU", VISUALIZACION ADMINISTRADOR 
def inventariado_articulos():
  global inventario_df
  print("\nINGRESO DE COMPRA DE ARTICULOS PARA TUTIENDAPERU")
  ruta_inventario= '/content/Inventarios_Proyect2022.xlsx'
  inventario_df=pd.read_excel(ruta_inventario)
  Columns(inventario_df)

#SUB MENU PERTENECIENTE A LA VISUALIZACION DEL ADMINISTRADOR (OPCION 2 , DEL MENU_ADMINISTRACION)
def inventario_articulos_submenu():
  global inventario_df
  eleccion_inventario=input("""
  \t1 - AGREGAR ARTICULOS
  \t2 - MOSTRAR LISTA DE ARTICULOS AGREGADOS
  \t3 - FILTRAR ARTICULOS AGREGADOS POR FECHA
  \t4 - SALIR
  \n INSERTE UNA OPCION: """)
  if eleccion_inventario == "1":
    agregar_fila_inventario()
    inventario_articulos_submenu()
  elif eleccion_inventario == "2":
    display(inventario_df)
    inventario_articulos_submenu()
  elif eleccion_inventario == "3":
    filtro_ingresos()
  elif eleccion_inventario == "4":
    menu_administracion()
  else:
     print("OPCION INCORRECTA")

#AGREGAR FILAS AL EXCEL INVENTARIADO_AREA ADMINISTRACION, PERTENECIENTE AL SUB MENU "INVENTARIADO_DE_ARTICULOS" DE MENU ADMINISTRACION
def agregar_fila_inventario():
  global inventario_df
  dicc_fila={}
  columnas_df=Columns(inventario_df)
  print("\nSE MUESTRA LA TABLA ACTUAL DE FORMA DE GUIA PARA CORRECTO ORDEN")
  display(inventario_df)
  for columna in columnas_df:
    dicc_fila[columna] = input('Ingrese valor de la columna {} :'.format(columna))
  inventario_df = inventario_df.append(dicc_fila, ignore_index = True)
  print("")
  print("Agregado Correctamente:")
  display(inventario_df)
  #inventario_df.to_excel('/content/Inventarios_Proyect2022.xlsx')

#PARA LA LECTURA DE FILAS POR COLUMNA DEL ARCHIVO EXCEL INGRESOS _ AREA ADMINISTRADOR
def Columns(inventario_df):
  columnas = inventario_df.columns
  list_columns = list(columnas)
  return list_columns

#FILTRO INGRESOS_ PERTENECIENTE AL ADMINISTRADOR
def filtro_ingresos():
  global inventario_df
  filtro_inventario=input("""\nSECCION FILTROS POR FECHA, QUE ACCIÓN DESEA REALIZAR:
  \t1 - FILTRAR
  \t2 - SALIR
  \nSELECCIONE UNA OPCION: """)
  if filtro_inventario == "1":
    print("POR EL MOMENTO SOLO SE PUEDE FILTRAR POR 'FECHA', SIGA EL FORMATO 'AÑO-MES-DIA', ASÍ COMO SE MUESTRA EN EL CUADRO")
    display(inventario_df.head(1))
    inventario_df.describe()
    respuesta_filtro_inventario =inventario_df.loc[inventario_df['FECHA'] == input("""
    \nINGRESE LA FECHA A FILTRAR: """)]
    display(respuesta_filtro_inventario)
    filtro_ingresos()
  elif filtro_inventario == "2":
    inventario_articulos_submenu()

#VISUALIZACION DE PAGOS MENSUALES A LOS COLABORADORES_ADMINISTRADOR
def Informacion_Mensualidad():
  ruta_pagos= '/content/Trabajadores_Pagos_Mensualidad_Proyect2022.xlsx'
  pago_mensualidad_df=pd.read_excel(ruta_pagos)
  display(pago_mensualidad_df) 

#GRAFICOS ADMINISTRADOR , OPCION 4 DEL MENU_ADMINISTRACION()
def graficos():
  global descarga_df
  print("\n LISTA REPRESENTACIONES ESTADISTICAS")
  eleccion_graficos=input("""SELECCIONE UNA OPCIÓN
  \t1 - GRAFICOS 
  \t2 - HISTOGRAMA
  \t3 - SALIR
  \nInserte una opción :""")
  if eleccion_graficos == "1" :
      salida_articulos()
      grafico_generales()
  elif eleccion_graficos == "2" :
      salida_articulos()
      histograma_graficos()
  elif eleccion_graficos == "3":
      menu_administracion()
  else:
    print("INGRESASTE UNA OPCION INCORRECTA")
    grafico_generales()   
 
#GRAFICOS DEL SUBMENU_GRAFICOS_ADMINISTRADOR , OPCION 1 DEL SUB MENU 'GRAFICOS()' DE 'MENU_ADMINISTRACION' , OPCION 4:>1
def grafico_generales():
  print("\nLISTA DE OPCIONES DE GRAFICOS")
  global descarga_df
  descarga_cliente = list(descarga_df["CLIENTE"])
  descarga_cantidad = list(descarga_df['DNI'])
  descarga_articulo = list(descarga_df['ARTICULOS'])
  descarga_fecha = list(descarga_df['FECHA'])
  descarga_cantidad = list(descarga_df['CANTIDAD'])
  descarga_precio = list(descarga_df['PRECIO'])
  descarga_ganancia = list(descarga_df['GANANCIA VENTA'])
  descarga_cantidad_escalada = 1*np.array(descarga_cantidad)
  eleccion_grafico =input("""
  \t1 - GRAFICO RELACION GANANCIA - CANTIDAD DE ARTICULOS
  \t2 - GRAFICO CANTIDAD VENDIDA POR FECHA
  \t3 - SALIR
  \n - SELECCIONE UNA OPCION: """)
  if eleccion_grafico == "1":
    print("")
    plt.style.use('seaborn-white')
    fig,ax=subplots()
    plt.scatter(descarga_ganancia,descarga_cantidad_escalada, marker= 'o',color ='blue')
    ax.set_xlabel('Valor de articulos vendidos')
    ax.set_ylabel('Cantidad de veces')
    ax.set_title("GRAFICO RELACION GANANCIA - CANTIDAD DE ARTICULOS\n")
    plt.grid()
    plt.show() 
    input("\nPRESIONE 'START' PARA CONTINUAR") 
    grafico_generales()
  elif eleccion_grafico == "2":
    print("")
    plt.style.use('seaborn-white')
    fig,ax = subplots()
    plt.scatter(descarga_ganancia,descarga_fecha, marker= 'o',color ='red')
    ax.set_xlabel('Ganancia')
    ax.set_ylabel('Fechas')
    ax.set_title("GRAFICO RELACION FECHA - GANANCIA\n")
    plt.grid()
    plt.show()
    input("\nPRESIONE 'START' PARA CONTINUAR") 
    grafico_generales()   
  elif eleccion_grafico == "3":
    graficos()
  else:
    print("INGRESASTE UNA OPCION INCORRECTA")
    grafico_generales()

#HISTOGRAMAS VISUALIZACION DE AREA ADMINISTRACION , OPCION 2 DEL SUB MENU GRAFICOS() DE MENU_ADMINISTRACION , OPCION 4:>2
def histograma_graficos():
  print("\nLISTA DE OPCIONES DE HISTOGRAMA")
  global descarga_df
  descarga_cliente = list(descarga_df["CLIENTE"])
  descarga_cantidad = list(descarga_df['DNI'])
  descarga_articulo = list(descarga_df['ARTICULOS'])
  descarga_fecha = list(descarga_df['FECHA'])
  descarga_cantidad = list(descarga_df['CANTIDAD'])
  descarga_precio = list(descarga_df['PRECIO'])
  descarga_ganancia = list(descarga_df['GANANCIA VENTA'])
  eleccion_histograma =input("""
  \t1 - HISTOGRAMA RELACION DE GANANCIA POR VALOR EN VENTAS
  \t2 - HISTOGRAMA RELACION DE CANTIDAD DE ARTICULOS POR PRECIO 
  \t3 - SALIR
  \n - SELECCIONE UNA OPCION: """)
  if eleccion_histograma == "1":
    print("")
    print(5*'-',"HISTOGRAMA RELACION DE GANANCIA POR VALOR EN VENTAS",5*'-')
    plt.style.use('seaborn-white')
    descarga_ganancia_arr = np.array(descarga_ganancia)
    plt.hist(descarga_ganancia_arr, bins = 5, alpha = 1, histtype='bar', color='steelblue', edgecolor = 'black')
    plt.show() 
    input("\nPRESIONE 'START' PARA CONTINUAR") 
    histograma_graficos() 
  if eleccion_histograma == "2":
    print("")
    print(5*'-',"HISTOGRAMA RELACION DE CANTIDAD DE ARTICULOS POR PRECIO",5*'-')
    plt.style.use('seaborn-white')
    descarga_precio_arr = np.array(descarga_precio)
    plt.hist(descarga_precio_arr, bins = 5, alpha = 1, histtype='bar', color='steelblue', edgecolor = 'black')
    plt.show()
    input("\nPRESIONE 'START' PARA CONTINUAR") 
    histograma_graficos()
  elif eleccion_histograma == "3":
    graficos()
  else:
    print("INGRESASTE UNA OPCION INCORRECTA")
    histograma_graficos()

################### MENU ALMACEN Y SUS FUNCIONES #################################
def menu_almacen():
  global descarga_df
  print("")
  print(10*'-',"BIENVENIDO A LA LISTA DE OPCIONES DE USUARIO",'-'*10)
  eleccion_almacen=input("""
  \t1 - VISUALIZAR STOCK ACTUALIZADO 
  \t2 - SALIDA DE ARTICULOS
  \t3 - SALIR
  \nINSERTE UNA OPCION :""")

  if eleccion_almacen == "1":
          stock_actualizado()
          input("\nPRESIONE 'START' PARA CONTINUAR: ")
          menu_almacen()
  elif eleccion_almacen=="2":    #mostrar el sub menu
          salida_articulos()
          descarga_articulos_submenu()
          input("\nPRESIONE 'START' PARA CONTINUAR: ")
  elif eleccion_almacen=="3":
          print("")
  else:
          input("NO INGRESASTE UNA OPCION CORRECTA...\nPulsar una tecla para continuar: ")  

#RUTA DE DESCARGA DE ARTICULOS_AREA DE VISUALIZACION DE ALMACEN
def salida_articulos():
  global descarga_df
  print("\n DESCARGA DE ARTICULOS PARA TUTIENDAPERU")
  ruta_descarga= '/content/Salida_Articulos_Proyec2022.xlsx'
  descarga_df=pd.read_excel(ruta_descarga)
  Columns(descarga_df)

#AGREGAR FILAS AL EXCEL DE SALIDAS DE ARTICULOS_AREA ALMACEN, PERTENECIENTE AL SUB_MENU_ALMACEN OPCION 2 
def descarga_articulos_submenu():
  global descarga_df
  eleccion_descarga=input("""
  \t1 - AGREGAR NUEVO ARTICULO
  \t2 - MOSTRAR LISTA DE ARTICULOS VENDIDOS
  \t3 - FILTRAR ARTICULOS VENDIDOS
  \t4 - SALIR
  \n INSERTE UNA OPCION: """)
  if eleccion_descarga == "1":
    #input("PRESIONE 'START' PARA CONTINUAR: ")
    descarga_articulos()
    input("PRESIONE 'START' PARA CONTINUAR: ")
    descarga_articulos_submenu()
  elif eleccion_descarga == "2":
    display(descarga_df)
    descarga_articulos_submenu()
  elif eleccion_descarga == "3":
    filtro_salidas()
  elif eleccion_descarga == "4":
    menu_almacen()
  else:
     print("OPCION INCORRECTA")  

#AGREGAR FILAS AL EXCEL DE VENTAS DE LA TIENDA, REGISTRADO  DE VENTAS, PERTENECIENTE AL SUB_MENU_DESCARGA_ARTICULOS OPCION 2:>1 
def descarga_articulos():
  global descarga_df
  dicc_fila1={}
  columnas_df=Columns(descarga_df)
  for columna in columnas_df:
    dicc_fila1[columna] = input('Ingrese valor de la columna {} :'.format(columna))
  descarga_df= descarga_df.append(dicc_fila1, ignore_index = True)
  display(descarga_df)
  #descarga_df.to_excel('/content/Salida_Articulos_Proyec2022.xlsx')

#PARA LA LECTURA DE FILAS POR COLUMNA DEL ARCHIVO EXCEL SALIDAS _ AREA ALMACEN
def Columns(descarga_df):
  columnas = descarga_df.columns
  list_columns = list(columnas)
  return list_columns

#FILTRO SALIDAS_PERTENECIENTE AL ALMACEN
def filtro_salidas():
  global descarga_df
  filtrosalidas=input("""QUE ACCIÓN DESEA REALIZAR:
  \t1 - FILTRAR
  \t2 - SALIR
  \nSELECCIONE UNA OPCION: """)
  if filtrosalidas== "1":
    print("POR EL MOMENTO SOLO SE PUEDE FILTRAR POR 'FECHA', SIGA EL FORMATO 'AÑO-MES-DIA")
    display(descarga_df.head(1))
    descarga_df.describe()
    respuesta_filtro_salida =descarga_df.loc[descarga_df['FECHA'] == input("""
    \nINGRESE LA FECHA A FILTRAR: """)]
    display(respuesta_filtro_salida)
    filtro_salidas()
  elif filtrosalidas == "2":
    descarga_articulos_submenu()

#BUCLE QUE MUESTRA EN PANTALLA EL MAIN() INICIAL , QUE PIDE LOGUEARSE AL USUARIO ( ADMINITRADOR / ALMACEN)
while True:
  main()
  eleccion=input("Inserta una Opción: ")
  if eleccion == "1":
    usuario=input("Ingrese su usuario: ")
    clave=getpass.getpass("Ingrese su contraseña: ")
    if usuario== __usuario1 and clave==__clave1 :
        menu_administracion()
    else:
        print("\nDATOS INGRESADOS INCORRECTOS (SI NO RECUERDA SUS DATOS COMUNIQUESE CON SU AREA RESPECTIVA)")
        input("\nPulsa 'START' para continuar...")
  elif eleccion=="2":
      usuario2=input("Favor Ingrese su usuario: ")
      clave2=getpass.getpass("Favor Ingrese su contraseña: ")
      if usuario2== __usuario2 and clave2==__clave2 :
        menu_almacen()
      else:
        print("\nDATOS INGRESADOS INCORRECTOS (SI NO RECUERDA SUS DATOS COMUNIQUESE CON SU ENCARGADO)")
  elif eleccion=="3":
        print("GRACIAS POR SU TIEMPO")
        break      
  else:
        print("NO INGRESO UNA OPCION CORRECTA")